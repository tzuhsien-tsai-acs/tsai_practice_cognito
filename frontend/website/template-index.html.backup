<<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tsai Cognito ÁôªÂÖ•Á≥ªÁµ±</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aws-sdk/2.1691.0/aws-sdk.min.js" integrity="sha512-4gV3dPpAcqvQ9jdsvcIUIO5w51gLtEfKXrcdJqnhPLkCHMK+f3s/LwPSRKF26JmbFz+q3c6GLDQ8fYlIziH0Dg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://unpkg.com/amazon-cognito-identity-js@6.3.12/dist/amazon-cognito-identity.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .container {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            width: 90%;
        }
        
        .logo {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .logo h1 {
            color: #667eea;
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }
        
        .logo p {
            color: #6b7280;
            font-size: 0.9rem;
        }
        
        .tab-buttons {
            display: flex;
            margin-bottom: 2rem;
            background: #f3f4f6;
            border-radius: 8px;
            padding: 4px;
        }
        
        .tab-button {
            flex: 1;
            padding: 0.75rem;
            border: none;
            background: transparent;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .tab-button.active {
            background: white;
            color: #667eea;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #374151;
            font-weight: 500;
        }
        
        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s;
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .form-group small {
            color: #6b7280;
            font-size: 0.8rem;
            margin-top: 0.25rem;
            display: block;
        }
        
        .btn {
            width: 100%;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background: #667eea;
            color: white;
        }
        
        .btn-primary:hover {
            background: #5a67d8;
        }
        
        .btn-primary:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }
        
        .message {
            padding: 0.75rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }
        
        .message.success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }
        
        .message.error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #fca5a5;
        }
        
        .message.info {
            background-color: #dbeafe;
            color: #1e40af;
            border: 1px solid #93c5fd;
        }
        
        .form-section {
            display: none;
        }
        
        .form-section.active {
            display: block;
        }
        
        .user-info {
            text-align: center;
            padding: 2rem;
        }
        
        .user-info h2 {
            color: #667eea;
            margin-bottom: 1rem;
        }
        
        .user-info p {
            margin-bottom: 0.5rem;
            color: #6b7280;
        }
        
        .btn-secondary {
            background: #6b7280;
            color: white;
            margin-top: 1rem;
        }
        
        .btn-secondary:hover {
            background: #4b5563;
        }
        
        .config-info {
            margin-top: 2rem;
            padding: 1rem;
            background: #f9fafb;
            border-radius: 8px;
            font-size: 0.8rem;
            color: #6b7280;
        }
        
        .config-info h3 {
            margin-bottom: 0.5rem;
            color: #374151;
        }
        
        .hidden {
            display: none;
        }
        
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .debug-info {
            margin-top: 1rem;
            padding: 1rem;
            background: #f0f0f0;
            border-radius: 8px;
            font-size: 0.8rem;
            color: #555;
            white-space: pre-wrap;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">
            <h1>üîê Tsai Cognito</h1>
            <p>ÂÆâÂÖ®ÁöÑÁî®Êà∂Ë™çË≠âÁ≥ªÁµ±</p>
        </div>
        
        <div id="loginSection">
            <div class="tab-buttons">
                <button class="tab-button active" onclick="showTab('login')">ÁôªÂÖ•</button>
                <button class="tab-button" onclick="showTab('register')">Ë®ªÂÜä</button>
            </div>
            
            <div id="messageDiv"></div>
            
            <!-- ÁôªÂÖ•Ë°®ÂñÆ -->
            <div id="loginForm" class="form-section active">
                <form onsubmit="signIn(event)">
                    <div class="form-group">
                        <label for="loginEmail">ÈõªÂ≠êÈÉµ‰ª∂</label>
                        <input type="email" id="loginEmail" required>
                    </div>
                    <div class="form-group">
                        <label for="loginPassword">ÂØÜÁ¢º</label>
                        <input type="password" id="loginPassword" required>
                    </div>
                    <button type="submit" class="btn btn-primary" id="loginBtn">ÁôªÂÖ•</button>
                </form>
            </div>
            
            <!-- Ë®ªÂÜäË°®ÂñÆ -->
            <div id="registerForm" class="form-section">
                <form onsubmit="signUp(event)">
                    <div class="form-group">
                        <label for="registerEmail">ÈõªÂ≠êÈÉµ‰ª∂</label>
                        <input type="email" id="registerEmail" required>
                    </div>
                    <div class="form-group">
                        <label for="registerPassword">ÂØÜÁ¢º</label>
                        <input type="password" id="registerPassword" required minlength="8">
                        <small>ÂØÜÁ¢ºËá≥Â∞ëÈúÄË¶Å8ÂÄãÂ≠óÁ¨¶</small>
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Á¢∫Ë™çÂØÜÁ¢º</label>
                        <input type="password" id="confirmPassword" required minlength="8">
                    </div>
                    <button type="submit" class="btn btn-primary" id="registerBtn">Ë®ªÂÜä</button>
                </form>
            </div>
            
            <!-- È©óË≠âË°®ÂñÆ -->
            <div id="verifyForm" class="form-section">
                <div class="form-group">
                    <label for="verificationCode">È©óË≠âÁ¢º</label>
                    <input type="text" id="verificationCode" required>
                    <small>Ë´ãÊü•ÁúãÊÇ®ÁöÑÈõªÂ≠êÈÉµ‰ª∂‰∏¶Ëº∏ÂÖ•È©óË≠âÁ¢º</small>
                </div>
                <button onclick="confirmSignUp()" class="btn btn-primary" id="verifyBtn">È©óË≠âÂ∏≥Êà∂</button>
            </div>
        </div>
        
        <!-- ÁôªÂÖ•ÂæåÁöÑÁî®Êà∂Ë≥áË®ä -->
        <div id="userSection" class="user-info hidden">
            <h2>Ê≠°ËøéÔºÅ</h2>
            <p id="userEmail"></p>
            <p id="userId"></p>
            <button onclick="signOut()" class="btn btn-secondary">ÁôªÂá∫</button>
        </div>
        
        <!-- ÈÖçÁΩÆË≥áË®ä -->
        <div class="config-info">
            <h3>Á≥ªÁµ±ÈÖçÁΩÆ</h3>
            <p>Region: <span id="configRegion">'{{REGION}}'</span></p>
            <p>User Pool: <span id="configUserPool">'{{USER_POOL_ID}}'</span></p>
            <p>Client ID: <span id="configClientId">'{{CLIENT_ID}}'</span></p>
            <p>Status: <span id="configStatus">Ê™¢Êü•‰∏≠...</span></p>
        </div>

        <!-- Èô§ÈåØË≥áË®ä -->
        <div id="debugInfo" class="debug-info hidden"></div>
    </div>

    <script>
        // Èô§ÈåØÂáΩÊï∏
        function debugLog(message) {
            console.log(message);
            const debugDiv = document.getElementById('debugInfo');
            debugDiv.style.display = 'block';
            debugDiv.textContent += new Date().toLocaleTimeString() + ': ' + message + '\n';
        }

        // ÂÖ®ÂüüËÆäÊï∏
        let userPool = null;
        let currentUser = null;
        let pendingUsername = null;
        
        // AWS Cognito ÈÖçÁΩÆ - ÈÄô‰∫õÂÄºÂ∞áË¢´ÈÉ®ÁΩ≤ËÖ≥Êú¨Ëá™ÂãïÊõøÊèõ
        const config = {
            region: '{{REGION}}',
            userPoolId: '{{USER_POOL_ID}}',
            clientId: '{{CLIENT_ID}}'
        };
        
        // Ê™¢Êü• SDK ËºâÂÖ•ÁãÄÊÖã
        function checkSDKLoaded() {
            debugLog('Ê™¢Êü• SDK ËºâÂÖ•ÁãÄÊÖã...');
            
            if (typeof AWS === 'undefined') {
                debugLog('AWS SDK Êú™ËºâÂÖ•');
                return false;
            }
            
            if (typeof AmazonCognitoIdentity === 'undefined') {
                debugLog('Amazon Cognito Identity SDK Êú™ËºâÂÖ•');
                return false;
            }
            
            debugLog('ÊâÄÊúâ SDK Â∑≤ËºâÂÖ•');
            return true;
        }
        
        // ÂàùÂßãÂåñÂáΩÊï∏
        function initializeCognito() {
            try {
                debugLog('ÈñãÂßãÂàùÂßãÂåñ Cognito...');
                debugLog('ÈÖçÁΩÆ: ' + JSON.stringify(config, null, 2));
                
                // Ê™¢Êü•ÈÖçÁΩÆÊòØÂê¶ÊúâÊïà
                // Ê™¢Êü•ÈÖçÁΩÆÊòØÂê¶ÊúâÊïà (‰øÆÊ≠£ÂæåÁöÑÈÇèËºØ)
                if (!config.userPoolId) {
                    throw new Error('User Pool ID Êú™ÈÖçÁΩÆ');
                }
                
                if (!config.clientId) {
                    throw new Error('Client ID Êú™ÈÖçÁΩÆ');
                }
                
                if (!config.region) {
                    throw new Error('Region Êú™ÈÖçÁΩÆ');
                }
                // Ë®≠ÁΩÆ AWS ÈÖçÁΩÆ
                AWS.config.region = config.region;
                debugLog('AWS ÂçÄÂüüË®≠ÁΩÆÁÇ∫: ' + config.region);
                
                // ÂâµÂª∫ User Pool
                const poolData = {
                    UserPoolId: config.userPoolId,
                    ClientId: config.clientId
                };
                
                userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);
                debugLog('User Pool ÂâµÂª∫ÊàêÂäü');
                
                // Êõ¥Êñ∞ÈÖçÁΩÆÈ°ØÁ§∫
                document.getElementById('configRegion').textContent = config.region;
                document.getElementById('configUserPool').textContent = config.userPoolId;
                document.getElementById('configClientId').textContent = config.clientId;
                document.getElementById('configStatus').textContent = 'Â∑≤ÈÄ£Êé•';
                document.getElementById('configStatus').style.color = '#10b981';
                
                debugLog('Cognito ÂàùÂßãÂåñÊàêÂäü');
                
                // Ê™¢Êü•ÊòØÂê¶Â∑≤ÁôªÂÖ•
                checkCurrentUser();
                
            } catch (error) {
                debugLog('Cognito ÂàùÂßãÂåñÂ§±Êïó: ' + error.message);
                document.getElementById('configStatus').textContent = 'ÈÄ£Êé•Â§±Êïó: ' + error.message;
                document.getElementById('configStatus').style.color = '#ef4444';
                showMessage('Á≥ªÁµ±ÂàùÂßãÂåñÂ§±Êïó: ' + error.message, 'error');
            }
        }
        
        // Ê™¢Êü•Áï∂ÂâçÁî®Êà∂
        function checkCurrentUser() {
            if (!userPool) {
                debugLog('User Pool Êú™ÂàùÂßãÂåñ');
                return;
            }
            
            try {
                currentUser = userPool.getCurrentUser();
                debugLog('Áï∂ÂâçÁî®Êà∂: ' + (currentUser ? currentUser.getUsername() : 'null'));
                
                if (currentUser != null) {
                    currentUser.getSession(function(err, session) {
                        if (err) {
                            debugLog('Áç≤ÂèñÊúÉË©±Â§±Êïó: ' + err.message);
                            return;
                        }
                        
                        debugLog('ÊúÉË©±ÁãÄÊÖã: ' + session.isValid());
                        if (session.isValid()) {
                            showUserInfo(currentUser);
                        }
                    });
                }
            } catch (error) {
                debugLog('Ê™¢Êü•Áï∂ÂâçÁî®Êà∂Â§±Êïó: ' + error.message);
            }
        }
        
        // Á≠âÂæÖ SDK ËºâÂÖ•ÁöÑÂáΩÊï∏
        function waitForSDKs(callback, maxAttempts = 10, currentAttempt = 0) {
            if (checkSDKLoaded()) {
                callback();
                return;
            }
            
            if (currentAttempt >= maxAttempts) {
                debugLog('SDK ËºâÂÖ•Ë∂ÖÊôÇ');
                showMessage('AWS SDK ËºâÂÖ•Â§±ÊïóÔºåË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢', 'error');
                return;
            }
            
            debugLog(`Á≠âÂæÖ SDK ËºâÂÖ•... (ÂòóË©¶ ${currentAttempt + 1}/${maxAttempts})`);
            setTimeout(() => {
                waitForSDKs(callback, maxAttempts, currentAttempt + 1);
            }, 1000);
        }
        
        // È†ÅÈù¢ËºâÂÖ•ÂÆåÊàê‰∫ã‰ª∂
        document.addEventListener('DOMContentLoaded', function() {
            debugLog('DOM ËºâÂÖ•ÂÆåÊàê');
            
            // Á≠âÂæÖ SDK ËºâÂÖ•
            waitForSDKs(function() {
                debugLog('SDK ËºâÂÖ•ÂÆåÊàêÔºåÈñãÂßãÂàùÂßãÂåñ');
                initializeCognito();
            });
        });
        
        // ÂÇôÁî®ÂàùÂßãÂåñÔºàwindow.onloadÔºâ
        window.addEventListener('load', function() {
            debugLog('È†ÅÈù¢ÂÆåÂÖ®ËºâÂÖ•');
            
            // Â¶ÇÊûúÈÇÑÊ≤íÂàùÂßãÂåñÔºåÂÜçË©¶‰∏ÄÊ¨°
            if (!userPool) {
                waitForSDKs(function() {
                    debugLog('ÂÇôÁî®ÂàùÂßãÂåñÈñãÂßã');
                    initializeCognito();
                });
            }
        });
        
        function showTab(tab) {
            // Ê∏ÖÈô§‰πãÂâçÁöÑÈåØË™§Ë®äÊÅØ
            clearMessage();
            
            // ÂàáÊèõÊ®ôÁ±§ÊåâÈàï
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // ÂàáÊèõË°®ÂñÆ
            document.querySelectorAll('.form-section').forEach(section => section.classList.remove('active'));
            document.getElementById(tab + 'Form').classList.add('active');
        }
        
        function showMessage(message, type = 'info') {
            const messageDiv = document.getElementById('messageDiv');
            messageDiv.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Ëá™ÂãïÊªæÂãïÂà∞Ë®äÊÅØ
            messageDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
        
        function clearMessage() {
            document.getElementById('messageDiv').innerHTML = '';
        }
        
        function showLoading(buttonId, text = 'ËôïÁêÜ‰∏≠...') {
            const button = document.getElementById(buttonId);
            button.disabled = true;
            button.innerHTML = `<span class="loading"></span>${text}`;
        }
        
        function hideLoading(buttonId, text) {
            const button = document.getElementById(buttonId);
            button.disabled = false;
            button.innerHTML = text;
        }
        
        function signUp(event) {
            event.preventDefault();
            
            if (!userPool) {
                showMessage('Á≥ªÁµ±Â∞öÊú™ÂàùÂßãÂåñÔºåË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢', 'error');
                return;
            }
            
            const email = document.getElementById('registerEmail').value.trim();
            const password = document.getElementById('registerPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            // È©óË≠âËº∏ÂÖ•
            if (!email || !password || !confirmPassword) {
                showMessage('Ë´ãÂ°´ÂØ´ÊâÄÊúâÊ¨Ñ‰Ωç', 'error');
                return;
            }
            
            if (password !== confirmPassword) {
                showMessage('ÂØÜÁ¢º‰∏çÂåπÈÖç', 'error');
                return;
            }
            
            if (password.length < 8) {
                showMessage('ÂØÜÁ¢ºËá≥Â∞ëÈúÄË¶Å8ÂÄãÂ≠óÁ¨¶', 'error');
                return;
            }
            
            showLoading('registerBtn', 'Ë®ªÂÜä‰∏≠...');
            clearMessage();
            
            const attributeList = [
                new AmazonCognitoIdentity.CognitoUserAttribute({
                    Name: 'email',
                    Value: email
                })
            ];
            
            debugLog('ÈñãÂßãË®ªÂÜäÁî®Êà∂: ' + email);
            
            userPool.signUp(email, password, attributeList, null, function(err, result) {
                hideLoading('registerBtn', 'Ë®ªÂÜä');
                
                if (err) {
                    debugLog('Ë®ªÂÜäÂ§±Êïó: ' + err.message);
                    let errorMessage = 'Ë®ªÂÜäÂ§±Êïó: ';
                    
                    switch (err.code) {
                        case 'UsernameExistsException':
                            errorMessage += 'Ê≠§ÈõªÂ≠êÈÉµ‰ª∂Â∑≤Ë¢´Ë®ªÂÜä';
                            break;
                        case 'InvalidPasswordException':
                            errorMessage += 'ÂØÜÁ¢º‰∏çÁ¨¶ÂêàË¶ÅÊ±Ç';
                            break;
                        case 'InvalidParameterException':
                            errorMessage += 'ÂèÉÊï∏ÁÑ°Êïà';
                            break;
                        default:
                            errorMessage += err.message;
                    }
                    
                    showMessage(errorMessage, 'error');
                    return;
                }
                
                debugLog('Ë®ªÂÜäÊàêÂäü: ' + result.user.getUsername());
                pendingUsername = email;
                showMessage('Ë®ªÂÜäÊàêÂäüÔºÅË´ãÊü•ÁúãÊÇ®ÁöÑÈõªÂ≠êÈÉµ‰ª∂‰∏¶Ëº∏ÂÖ•È©óË≠âÁ¢º„ÄÇ', 'success');
                
                // ÂàáÊèõÂà∞È©óË≠âË°®ÂñÆ
                document.querySelectorAll('.form-section').forEach(section => section.classList.remove('active'));
                document.getElementById('verifyForm').classList.add('active');
            });
        }
        
        function confirmSignUp() {
            const verificationCode = document.getElementById('verificationCode').value.trim();
            
            if (!verificationCode) {
                showMessage('Ë´ãËº∏ÂÖ•È©óË≠âÁ¢º', 'error');
                return;
            }
            
            if (!pendingUsername) {
                showMessage('Ë´ãÂÖàË®ªÂÜäÂ∏≥Êà∂', 'error');
                return;
            }
            
            if (!userPool) {
                showMessage('Á≥ªÁµ±Â∞öÊú™ÂàùÂßãÂåñÔºåË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢', 'error');
                return;
            }
            
            showLoading('verifyBtn', 'È©óË≠â‰∏≠...');
            clearMessage();
            
            const userData = {
                Username: pendingUsername,
                Pool: userPool
            };
            
            const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
            
            debugLog('ÈñãÂßãÈ©óË≠âÁî®Êà∂: ' + pendingUsername);
            
            cognitoUser.confirmRegistration(verificationCode, true, function(err, result) {
                hideLoading('verifyBtn', 'È©óË≠âÂ∏≥Êà∂');
                
                if (err) {
                    debugLog('È©óË≠âÂ§±Êïó: ' + err.message);
                    let errorMessage = 'È©óË≠âÂ§±Êïó: ';
                    
                    switch (err.code) {
                        case 'CodeMismatchException':
                            errorMessage += 'È©óË≠âÁ¢º‰∏çÊ≠£Á¢∫';
                            break;
                        case 'ExpiredCodeException':
                            errorMessage += 'È©óË≠âÁ¢ºÂ∑≤ÈÅéÊúü';
                            break;
                        default:
                            errorMessage += err.message;
                    }
                    
                    showMessage(errorMessage, 'error');
                    return;
                }
                
                debugLog('È©óË≠âÊàêÂäü');
                showMessage('Â∏≥Êà∂È©óË≠âÊàêÂäüÔºÅË´ã‰ΩøÁî®ÊÇ®ÁöÑÂ∏≥Êà∂ÁôªÂÖ•„ÄÇ', 'success');
                
                // ÂàáÊèõÂà∞ÁôªÂÖ•Ë°®ÂñÆ
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                document.querySelector('.tab-button').classList.add('active');
                document.querySelectorAll('.form-section').forEach(section => section.classList.remove('active'));
                document.getElementById('loginForm').classList.add('active');
                
                // Ëá™ÂãïÂ°´ÂÖ•ÁôªÂÖ•Ë°®ÂñÆ
                document.getElementById('loginEmail').value = pendingUsername;
                
                pendingUsername = null;
            });
        }
        
        function signIn(event) {
            event.preventDefault();
            
            if (!userPool) {
                showMessage('Á≥ªÁµ±Â∞öÊú™ÂàùÂßãÂåñÔºåË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢', 'error');
                return;
            }
            
            const email = document.getElementById('loginEmail').value.trim();
            const password = document.getElementById('loginPassword').value;
            
            if (!email || !password) {
                showMessage('Ë´ãÂ°´ÂØ´ÈõªÂ≠êÈÉµ‰ª∂ÂíåÂØÜÁ¢º', 'error');
                return;
            }
            
            showLoading('loginBtn', 'ÁôªÂÖ•‰∏≠...');
            clearMessage();
            
            const authenticationData = {
                Username: email,
                Password: password,
            };
            
            const authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);
            
            const userData = {
                Username: email,
                Pool: userPool
            };
            
            const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
            
            debugLog('ÈñãÂßãÁôªÂÖ•Áî®Êà∂: ' + email);
            
            cognitoUser.authenticateUser(authenticationDetails, {
                onSuccess: function(result) {
                    debugLog('ÁôªÂÖ•ÊàêÂäü');
                    hideLoading('loginBtn', 'ÁôªÂÖ•');
                    showMessage('ÁôªÂÖ•ÊàêÂäüÔºÅ', 'success');
                    
                    setTimeout(() => {
                        showUserInfo(cognitoUser);
                    }, 1000);
                },
                
                onFailure: function(err) {
                    debugLog('ÁôªÂÖ•Â§±Êïó: ' + err.message);
                    hideLoading('loginBtn', 'ÁôªÂÖ•');
                    
                    let errorMessage = 'ÁôªÂÖ•Â§±Êïó: ';
                    
                    switch (err.code) {
                        case 'NotAuthorizedException':
                            errorMessage += 'ÈõªÂ≠êÈÉµ‰ª∂ÊàñÂØÜÁ¢º‰∏çÊ≠£Á¢∫';
                            break;
                        case 'UserNotConfirmedException':
                            errorMessage += 'Â∏≥Êà∂Â∞öÊú™È©óË≠âÔºåË´ãÊ™¢Êü•ÊÇ®ÁöÑÈõªÂ≠êÈÉµ‰ª∂';
                            pendingUsername = email;
                            // ÂàáÊèõÂà∞È©óË≠âË°®ÂñÆ
                            setTimeout(() => {
                                document.querySelectorAll('.form-section').forEach(section => section.classList.remove('active'));
                                document.getElementById('verifyForm').classList.add('active');
                            }, 2000);
                            break;
                        case 'PasswordResetRequiredException':
                            errorMessage += 'ÈúÄË¶ÅÈáçÁΩÆÂØÜÁ¢º';
                            break;
                        case 'UserNotFoundException':
                            errorMessage += 'Áî®Êà∂‰∏çÂ≠òÂú®';
                            break;
                        case 'TooManyRequestsException':
                            errorMessage += 'Ë´ãÊ±ÇÂ§™È†ªÁπÅÔºåË´ãÁ®çÂæåÂÜçË©¶';
                            break;
                        default:
                            errorMessage += err.message;
                    }
                    
                    showMessage(errorMessage, 'error');
                },
                
                onMfaRequired: function(codeDeliveryDetails) {
                    debugLog('ÈúÄË¶Å MFA È©óË≠â');
                    showMessage('ÈúÄË¶ÅÂ§öÈáçÈ©óË≠âÔºåË´ãÊ™¢Êü•ÊÇ®ÁöÑË£ùÁΩÆ', 'info');
                }
            });
        }
        
        function showUserInfo(cognitoUser) {
            document.getElementById('loginSection').classList.add('hidden');
            document.getElementById('userSection').classList.remove('hidden');
            
            cognitoUser.getSession(function(err, session) {
                if (err) {
                    debugLog('Áç≤ÂèñÊúÉË©±Â§±Êïó: ' + err.message);
                    showMessage('Áç≤ÂèñÁî®Êà∂Ë≥áË®äÂ§±Êïó', 'error');
                    return;
                }
                
                debugLog('Áî®Êà∂ÊúÉË©±Áç≤ÂèñÊàêÂäü');
                const payload = session.getIdToken().payload;
                debugLog('Áî®Êà∂Ë≥áË®ä: ' + JSON.stringify(payload, null, 2));
                
                document.getElementById('userEmail').textContent = `ÈõªÂ≠êÈÉµ‰ª∂: ${payload.email || 'Êú™Áü•'}`;
                document.getElementById('userId').textContent = `Áî®Êà∂ ID: ${payload.sub || 'Êú™Áü•'}`;
            });
        }
        
        function signOut() {
            if (!userPool) {
                debugLog('User Pool Êú™ÂàùÂßãÂåñ');
                return;
            }
            
            const cognitoUser = userPool.getCurrentUser();
            if (cognitoUser != null) {
                cognitoUser.signOut();
                debugLog('Áî®Êà∂Â∑≤ÁôªÂá∫');
            }
            
            // ÈáçÁΩÆ UI
            document.getElementById('userSection').classList.add('hidden');
            document.getElementById('loginSection').classList.remove('hidden');
            
            // ÈáçÁΩÆË°®ÂñÆ
            document.querySelectorAll('input').forEach(input => input.value = '');
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelector('.tab-button').classList.add('active');
            document.querySelectorAll('.form-section').forEach(section => section.classList.remove('active'));
            document.getElementById('loginForm').classList.add('active');
            
            clearMessage();
            showMessage('Â∑≤ÊàêÂäüÁôªÂá∫', 'success');
            
            // Ê∏ÖÈô§ÂÖ®ÂüüËÆäÊï∏
            currentUser = null;
            pendingUsername = null;
        }
        
        // ÈåØË™§ËôïÁêÜ
        window.addEventListener('error', function(event) {
            debugLog('JavaScript ÈåØË™§: ' + event.error.message);
            console.error('JavaScript ÈåØË™§:', event.error);
        });
        
        // Á∂≤Ë∑ØÁãÄÊÖãÊ™¢Êü•
        window.addEventListener('online', function() {
            debugLog('Á∂≤Ë∑ØÈÄ£Êé•ÊÅ¢Âæ©');
        });
        
        window.addEventListener('offline', function() {
            debugLog('Á∂≤Ë∑ØÈÄ£Êé•‰∏≠Êñ∑');
            showMessage('Á∂≤Ë∑ØÈÄ£Êé•‰∏≠Êñ∑ÔºåÊüê‰∫õÂäüËÉΩÂèØËÉΩÁÑ°Ê≥ï‰ΩøÁî®', 'error');
        });
    </script>
</body>
</html>
